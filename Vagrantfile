# -*- mode: ruby -*-
# vi: set ft=ruby :


$bashrc_001 = <<-SHELL
# direnv
eval "$(direnv hook bash)"
SHELL

$bashrc_002 = <<-SHELL
# python
export PYTHONPATH=/vagrant
echo "Set PYTHONPATH=$PYTHONPATH"
SHELL

$bashrc_999 = <<-SHELL
# Vagrant work dir.
stat /vagrant >/dev/null 2>&1
if [ -d /vagrant ]; then
  cd /vagrant
fi
SHELL

$bashrc= <<-SHELL

#VAGRANT_PROVISION
for SOURCE in ~/.bashrc.d/*;
do
  source $SOURCE
done
SHELL

$pip38 = <<-SHELL
#!/usr/bin/python3.8
# GENERATED BY DEBIAN

import sys

# Run the main entry point, similarly to how setuptools does it, but because
# we didn't install the actual entry point from setup.py, don't use the
# pkg_resources API.
from pip._internal import main
if __name__ == \"__main__\":
    sys.exit(main())
SHELL


Vagrant.configure("2") do |config|
    config.vm.box = "bento/ubuntu-21.10"
    config.vm.host_name = "nginx-unit-issues"
    config.vm.network "private_network", type: "dhcp"
    config.vm.synced_folder ".", "/vagrant"
    config.vm.provision "shell", name: 'packages', inline: <<-SHELL
      apt-get update
      apt-get install -y direnv
      # apt-get install -y python3.8
      # apt-get install -y python3-pip
    SHELL
    # config.vm.provision :shell, name: 'pip3.8', :inline => "echo 'Configuring Python pip3.8...' &&  echo -e $'#{$pip38}' > /usr/bin/pip3.8 && chmod --reference=/usr/bin/pip3 /usr/bin/pip3.8"
    config.vm.provision :shell, name: '.bashrc.d', :inline => "echo 'Creating .bashrc.d...' &&  mkdir -p ~/.bashrc.d && chmod 700 ~/.bashrc.d", privileged: false
    config.vm.provision :shell, name: 'direnv.bashrc', :inline => "echo -e '#{$bashrc_001}' > ~/.bashrc.d/001-direnv && chmod +x ~/.bashrc.d/001-direnv", privileged: false
    config.vm.provision :shell, name: 'python.bashrc', :inline => "echo -e '#{$bashrc_002}' > ~/.bashrc.d/002-python && chmod +x ~/.bashrc.d/002-python", privileged: false
    config.vm.provision :shell, name: 'vagrant.bashrc', :inline => "echo -e '#{$bashrc_999}' > ~/.bashrc.d/999-vagrant && chmod +x ~/.bashrc.d/999-vagrant", privileged: false
    config.vm.provision :shell, name: '.bashrc', :inline => "DONE=`grep -Fq \\#VAGRANT_PROVISION ~/.bashrc /dev/null; echo $?` && if [ $DONE -eq 1 ]; then echo '#{$bashrc}' >> ~/.bashrc; else echo '.bashrc already patched.'; fi", privileged: false

  config.vm.provider :virtualbox do |vb|
   vb.gui = true
  end

  config.vm.provider :vmware_desktop do |vw|
    vw.gui = true
    #vw.memory = 2048
    #vw.cpus = 2
  end

  end
